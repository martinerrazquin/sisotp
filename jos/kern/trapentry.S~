/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(Trap_0, T_DIVIDE)
TRAPHANDLER_NOEC(Trap_1, T_DEBUG)
TRAPHANDLER_NOEC(Trap_2, T_NMI)
TRAPHANDLER_NOEC(Trap_3, T_BRKPT)
TRAPHANDLER_NOEC(Trap_4, T_OFLOW)
TRAPHANDLER_NOEC(Trap_5, T_BOUND)
TRAPHANDLER_NOEC(Trap_6, T_ILLOP)
TRAPHANDLER_NOEC(Trap_7, T_DEVICE)
TRAPHANDLER(Trap_8, T_DBLFLT)
TRAPHANDLER(Trap_10, T_TSS)
TRAPHANDLER(Trap_11, T_SEGNP)
TRAPHANDLER(Trap_12, T_STACK)
TRAPHANDLER(Trap_13, T_GPFLT)
TRAPHANDLER(Trap_14, T_PGFLT)
TRAPHANDLER_NOEC(Trap_16, T_FPERR)
TRAPHANDLER(Trap_17, T_ALIGN)
TRAPHANDLER_NOEC(Trap_18, T_MCHK)
TRAPHANDLER_NOEC(Trap_19, T_SIMDERR)
//TRAPHANDLER_NOEC(Trap_20, 20)
TRAPHANDLER_NOEC(Trap_48, T_SYSCALL)

	



/*
 * Lab 3: Your code here for _alltraps
 */

_alltraps:

	/*
    push values to make the stack look like a struct Trapframe
    load GD_KD into %ds and %es
    pushl %esp to pass a pointer to the Trapframe as an argument to trap()
    call trap (can trap ever return?)
	*/

	pop		(0x0)		//en dir(0x0) esta el num. TODO: arreglar esto
	pop		(0x4)		//Otro pop para el error code
	pusha				//Ya se pushearon los registros generales del TF
	push	%es
	push	%ds
	push	(0x0)		//Numero de trap
	push	(0x4)			//tf_errno??? TODO: Arreglar esto
	push	(%esp)
	push	%cs
	pushf
	push	%esp
	push	%ss			//Aca se termina el TrapFrame
	movw	GD_KD, %ds	
	movw	GD_KD, %es
	pushl	%esp
	call trap
	
	
	
	

